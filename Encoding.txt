lwmovie should supports any input file compliant with the required input format, but ffmpeg is generally preferred for its available options.

===== MPEG-1 video authoring with ffmpeg =====
Slice count:
lwmovie supports threaded deslicing, which processes each slice of an input frame by dispatching a threadable work task, something that scales extremely well with processor count.  You can control the number of slices that ffmpeg produces per frame using the -slices command line switch, up to a maximum of 1 slice per 16 rows of vertical resolution, rounded up.

IDCT:
lwmovie's internal IDCT is nearly identical to the FFMPEG "int" idct, so you should add -idct int to your command line.  This will reduce artifacts from drift.

Additional options:
Please refer to ffmpeg's FAQ and user guide for a complete rundown of flags.  Generally speaking, for the best quality encoding, you should use 2-pass encoding.  Recommended additional flags are:
-dia_size 1024 -trellis 2 -mbd rd -cmp 2 -subcmp 2 -mbcmp 2 -skipcmp 2 -g 100 -mpv_flags +qp_rd+mv0 -bf 16 -b_strategy 2

Note that -b_strategy 2 will drastically increase encoding time, especially with high -bf values.  You may wish to reduce -bf to a smaller number or use -b_strategy 1 instead, although -b_strategy 2 is better at handling fades.


---- Full-range trick ----
If you want to use the higher-quality "full-range" YUV, then you'll need to manually convert to raw video in that colorspace and then encode from the raw video.  This requires manually specifying the framerate and dimensions as well.  Note that this is not recommended if you're encoding from an input format that is already in MPEG YUV space.

Example with a 1920x768 24fps video:
ffmpeg -i inputvideo.avi -vcodec rawvideo -pix_fmt yuvj420p -an -y rawvideo.yuv
ffmpeg -f rawvideo -vcodec rawvideo -s 1920x768 -r 24 -pix_fmt yuv420p -i rawvideo.yuv -an -y rangehack.m1v
